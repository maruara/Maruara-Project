<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 
	http://openframework.or.kr/framework_reference/spring/ver2.x/html/aop.html
	
	Aspect : 하나의 Concern에 대한 모듈화 된 묶음, Spring AOP에서 aspect는 정규클래스나 @Asject Annotation으로 정의된 정규 클래스를 사용하여 구현한다.
	Joinpoint : 프로그램이 실행되는 동안 Aspect가 수행될 지점
				다양한 객체들에 존재하던 Concern의 실제 위치
				Spring AOP에서 joinpoint는 언제나 메소드 호출을 나타낸다. joinpoint 정보는 org.aspectj.lang.JoinPoint 타입의 파라미터를 선언하여 advice에서 사용가능하다.
	Advice : 각각의 Joinpoint에 적용될 행위
			 advice의 다른 타입은 "around", "before", "after" advice를 포함한다.
	Pointcut : Joinpoint의 묶음으로서 Advice는 Pointcut 단위로 적용된다.
			   @Pointcut("execution(public * *(..))")
    		   private void anyPublicOperation() {}
	Introduction : Joinpoint를 가지는 클래스에 메소드나 필드들을 추가하는 행위
	Weaving : Aspect들을 Advice될 대상 개체들과 엮어주는 행위
	
	
	<aop:config /> : aop 설정을 포함
	<aop:aspect /> : Aspect를 설정
	<aop:pointcut /> : pointcut을 설정
	<aop:before /> : before advice를 정의
	<aop:after-returning /> : 메소드가 정상 실행 결과 후에 적용될 advice 정의
	<aop:after-throwing /> : 메소드가 예외 발생시 적용될 advice 정의
	<aop:after /> : 메소드 실행 후 (예외발생시라도) 무조건 실행하는 advice 정의
	<aop:around /> : 메소드의 시작전/후를 모두 제어할 수 있는 advice 정의
	
	
	Pointcut 표현식
		문법
			- execution(수식어 리턴타입 패키지.클래스명.메소드명(파라미터))
			- within(타입)
			- bean(빈이름)
	
	
	샘플
		<beans:bean id="logging" class="test.LogAspect" />
		<aop:config>
			<aop:aspect id="loggingAspect" ref="logging">
				<aop:pointcut expression="execution(* *..*Service.*(..))" id="serviceOperation"/>
				<aop:before method="doLog" pointcut-ref="serviceOperation"/>
			</aop:aspect>
		</aop:config>
	-->
	
	
	
	
	<!-- Enable @AspectJ support -->
	<!--      
	<aop:aspectj-autoproxy/>
	<bean id="session" class="com.keype.system.Session" scope="session">
		<aop:scoped-proxy />
	</bean> 
	-->
	
	
		
</beans:beans>
