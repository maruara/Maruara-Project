<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<!--
<!DOCTYPE log4j:configuration PUBLIC "-//LOGGER" "log4j.dtd">
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

Jar 파일에 있을 경우
<!DOCTYPE log4j:configuration SYSTEM "jar:file:/path/.m2/repository/log4j/log4j/1.2.14/log4j-1.2.14.jar!/org/apache/log4j/xml/log4j.dtd">

Http
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">

Maven
<!DOCTYPE log4j:configuration SYSTEM "jar:file:${M2_REPO}/log4j/log4j/1.2.14/log4j-1.2.14.jar!/org/apache/log4j/xml/log4j.dtd">
 -->


<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>

	<appender name="console" class="org.apache.log4j.ConsoleAppender">
  		<param name="encoding" value="UTF-8" />
  		<param name="target" value="System.out" />
    	<layout class="org.apache.log4j.PatternLayout">
      		<param name="ConversionPattern" value="[%d{HH:mm:ss.SSS}] %-5p %C{1}.%M(%F:%L) | %m%n"/>
    	</layout>
  	</appender>
  	
  	<appender name="sqlout" class="org.apache.log4j.ConsoleAppender">
  		<param name="encoding" value="UTF-8" />
  		<param name="target" value="System.out" />
    	<layout class="org.apache.log4j.PatternLayout">
      		<param name="ConversionPattern" value="[%d{HH:mm:ss.SSS}] | %m%n"/>
    	</layout>
  	</appender>
  	
  	<appender name="logFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="${webapp.root}/../logs/log.log" />
        <param name="Append" value="true" />
        <param name="DatePattern" value=".yyyy-MM-dd" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%t &gt; [%d{yyyy-MM-dd HH:mm:ss}] %-5p %C.%M(%F:%L) | %m%n" />
        </layout>
    </appender>
  	
  	
  	<!--
  	org.apache.log4j.ConsoleAppender : Console 화면으로 출력하기 위한 Appender. 다음은 log4j.xml 파일 내의 ConsoleAppender에 대한 속성 정의 내용이다. 
  	
  	
  	Layout 종류
  		org.apache.log4j.HTMLLayout
  		org.apache.log4j.PatternLayout
  		org.apache.log4j.SimpleLayout
  		org.apache.log4j.xml.XMLLayout 
  	
  	Appender Layout
	  	%p : debug, infor, warn, error, fatal 등의 Priority 출력 
  		%m : 로그 내용 출력 
  		%d : 로깅 이벤트가 발생한 시간 기록. 출력 포맷은 %d 후의 {}내에 지정된 형태를 따른다. %d{HH:mm:ss, SSS} 라든가 %d{yyyy MMM dd HH:mm:ss, SSS}와 같은 형태로 사용할 수 있다. Java의 SimpleDateFormat의 형식을 따라 정의할 수 있다. 
  		%t : 로깅 이벤트가 발생된 쓰레드의 이름 출력 
  		%n : 플랫폼 종속적인 개행 문자 출력. \r\n 또는 \n이 될 것이다.
  		%t : 로그이벤트가 발생된 쓰레드의 이름을 출력
  		%c : 카테고리를 표시. 카테고리가 a.b.c처럼 되어 있다면 %c{2}는 b.c가 출력 됨.
  		%C : 클래스명을 표시
  		%F : 로깅이 발생한 프로그램 파일명을 나타냅니다. 
		%l : 로깅이 발생한 caller의 정보를 나타냅니다 
		%L : 로깅이 발생한 caller의 라인수를 나타냅니다 
		%M : 로깅이 발생한 method 이름을 나타냅니다. 
		%r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds) 
		%x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다. 
		%X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. 
  	
  	
  	<appender name="file" class="org.apache.log4j.FileAppender">
		<param name="encoding" value="UTF-8" />
		
		기본경로는 eclipse경로 (workspace 경로 아님)
		<param name="File" value="log4j.log" />
		
		또는 Spring 사용시
		<param name="File" value="${webapp.root}/WEB-INF/logs/log4j.log" />
		
		<param name="Append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{HH:mm:ss.SSS}] %-5p %C{1}.%M(%F:%L) - %m%n"/>
		</layout>
	</appender>
	
	
	
	
	날짜별 로그
	org.apache.log4j.DailyRollingFileAppender : 설정한 날짜 또는 조건에 맞춰 로깅을 수행하기 위한 Appender. DailyRollingFileAppender 파일에서 사용할 수 있는 몇가지 날짜 포맷은 다음과 같다. 
												하위에 File, DatePattern과 같은 parameter를 정의할 수 있다. 
	<appender name="dailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="D:/workspaces/eclipse-jee-helios-win32/spring/logs/error.log" />
        <param name="Append" value="true" />
        
        yyyy-MM 매달 첫번째날에 로그파일을 변경합니다  
        yyyy-ww 매주의 시작시 로그파일을 변경합니다.  
        yyyy-MM-dd 매일 자정에 로그파일을 변경합니다.  
        yyyy-MM-dd-a 자정과 정오에 로그파일을 변경합니다.  
        yyyy-MM-dd-HH 매 시간의 시작마다 로그파일을 변경합니다. 
        yyyy-MM-dd-HH-mm 매분마다 로그파일을 변경합니다.
        <param name="DatePattern" value=".yyyy-MM-dd" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[XXX] %d %-5p: %c - %m%n" />
        </layout>
    </appender>
	
	
	
	
	특정 크기마다 백업하여 로그
	org.apache.log4j.RollingFileAppender : FileAppender는 지정한 파일에 로그가 계속 남으므로 한 파일의 크기가 지나치게 커질 수 있으며 계획적인 로그 관리가 어렵다. 
										   따라서 파일의 크기 또는 파일 백업 인덱스 등의 지정을 통해 특정 크기 이상 파일의 크기가 커지게 되면 기존 파일을 백업 파일로 바꾸고 처음부터 다시 로깅을 시작한다. 
										   하위에 File, Append, MaxFileSize, MaxBackupIndex와 같은 parameter를 정의할 수 있다. 
	<appender name="rollingFile" class="org.apache.log4j.RollingFileAppender">
		<param name="file" value="rolling.log" />
		<param name="Append" value="true" />
		
		로그 파일의 최대 크기를 정의하기 위한 parameter
		<param name="MaxFileSize" value="1kb" />
		
		로그 파일 백업 인덱스를 정의하기 위한 parameter 
		<param name="MaxBackupIndex" value="1" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%t> [%d{yyyy-MM-dd HH:mm:ss}] [%c{1}] [%L] [%p] %m %n" />
		</layout>
	</appender>
	
	
	
	XML 형식으로 로그
	<appender name="xmlFile" class="org.apache.log4j.FileAppender">
		<param name="file" value="log4jxml.xml" />
		<param name="Append" value="true" />
		<layout class="org.apache.log4j.xml.XMLLayout" />
	</appender>
	
	
	
	
	데이터베이스에 로그
	org.apache.log4j.jdbc.JDBCAppender : DB에 로그를 출력하기 위한 Appender로 하위에 Driver, URL, User, Password, Sql과 같은 parameter를 정의할 수 있다.
										 다음은 log4j.xml 파일 내의 JDBCAppender에 대한 속성 정의 내용이다.
	<appender name="db" class="org.apache.log4j.jdbc.JDBCAppender">
		
		JDBC Driver를 정의하기 위한 parameter
		<param name="Driver" value="oracle.jdbc.driver.OracleDriver"/>
		
		DB URL을 정의하기 위한 parameter
		<param name="URL" value="jdbc:oracle:thin:@107.108.150.108:1521:ora10"/>
		
		DB User를 정의하기 위한 parameter
		<param name="User" value="anyframe"/>
		
		DB Password를 정의하기 위한 parameter
		<param name="Password" value="anyframe"/>
		
		로그를 남길때 수행할 쿼리를 정의하기 위한 parameter
		<param name="Sql" value="insert into STMR_LOG (msg) values('%d %p [%c] - &lt;%m&gt;%n')"/>
	</appender>
	-->
	
	
	
	
	<!-- 
	FATAL : 가장 크리티컬한 에러가 일어 났을 때 사용합니다.
	ERROR : 일반 에러가 일어 났을 때 사용합니다.
	WARN : 에러는 아니지만 주의할 필요가 있을 때 사용합니다.
	INFO : 일반 정보를 나타낼 때 사용합니다.
	DEBUG : 일반 정보를 상세히 나타낼 때 사용합니다.
	
	
	
	additivity 속성을 사용하지 않았을 때 중복 로깅되는 이유는 root 태그 때문이다. root 태그는 말 그대로 최상위 로그이기 때문에 root에서 지정된 속성이 상속되어 로깅된다.
	additivity 속성을 사용하지 않기 위해서는 root와 logger 속성이 같을 때는 굳이 지정해주지 않아도 되고,
	appender를 다르게 지정하고 싶으면 appender-ref만 root와 다른 appender로 지정하면 된다.
	-->
	
	<logger name="org.apache" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	
  	<logger name="org.springframework" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	
  	<logger name="org.springframework.web.servlet.DispatcherServlet" additivity="false">
		<level value="debug" />
		<appender-ref ref="console" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	
	<!--  
  	<logger name="org.apache.commons.digester" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.apache.catalina" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.apache.jasper.servlet" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.aop" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.beans.factory.support" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.web.servlet" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	-->
  	
  	
  	<!-- root 를 debug로 교체하면서 추가사항 -->
  	<!-- 
  	<logger name="org.apache.commons.beanutils" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.core.io.support" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.beans.factory.annotation" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.beans.factory.xml" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.context.annotation" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.context.support" additivity="false">
		<level value="info" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="org.springframework.transaction.interceptor" additivity="false">
		<level value="INFO" />
		<appender-ref ref="console" />
  	</logger>
  	 -->
  	


	
	
	<!-- 
	PreparedStatement 를 debug 로 출력할 경우 Connection 도 debug로 해야 한다.
	 -->
	<logger name="java.sql.Connection" additivity="false">
		<level value="debug" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	<logger name="java.sql.Statement" additivity="false">
		<level value="error" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	<logger name="java.sql.PreparedStatement" additivity="false">
		<level value="debug" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	<logger name="java.sql.ResultSet" additivity="false">
		<level value="error" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	
  	<logger name="org.mybatis.spring" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
  	</logger>
  	
  	
	
	
	
	<!-- ****************************************************************** -->
	<!-- ****************************************************************** -->
	<!-- log4jdbc 설정 -->
	<!-- ****************************************************************** -->
	<!-- ****************************************************************** -->

	<!-- log4jdbc-remix SQL & Result Set -->
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>

	
	<!--
	log SQL (pre-execution) plus exceptions caused by SQL
	변수 바인딩이 완료된 SQL을 출력한다. 
	-->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>
	
	
	<!-- 
	log SQL with timing information, post execution
	jdbc.sqlonly처럼 변수 바인딩이 완료된 SQL과 SQL 수행시간을 출력한다.
	-->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="debug" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>
	
	
	<!-- 
	only use the two logs below to trace ALL JDBC information, NOTE: This can be very voluminous!
	log all jdbc calls except ResultSet calls
	SQL 시작(Connection)부터 끝까지 로그를 순서대로 거의 다 출력한다.
	-->
	<logger name="jdbc.audit" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>
	
	
	<!-- log the jdbc ResultSet calls -->
	<logger name="jdbc.resultset" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>
	
	
	<!-- log connection open/close events and dump of all open connection numbers -->
	<logger name="jdbc.connection" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>


	<!--
	 this log is for internal debugging of log4jdbc, itself
	 debug logging for log4jdbc itself
	 log4jdbc의 초기화 작업 debug 를 출력한다.
	 -->
	<logger name="log4jdbc.debug" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</logger>
	
	
	
	
	
  	
  	
  	
  	<!-- 
  	root의 로깅을 상속받아서 처리하므로 주석처리
  	<logger name="com.web" additivity="false">
		<level value="debug" />
		<appender-ref ref="console" />
  	</logger>
  	
  	<logger name="test" additivity="false">
		<level value="debug" />
		<appender-ref ref="console" />
  	</logger>
  	-->
  	
  	
  	
  	
 	<!-- 
 	1.3 이전 버전에서 사용
  	<category name="com.web">
  		<priority value="debug" />
  	</category>
  	-->
  	
  	
  	<!-- Root -->
	<root>
		<level value="debug" />
		<appender-ref ref="console"/>
		<!--  
		<appender-ref ref="logFile"/>
		-->
	</root>

    
</log4j:configuration>