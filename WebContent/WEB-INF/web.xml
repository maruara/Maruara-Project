<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	
	<display-name>web</display-name>
	
	
	
	<!-- Spring Context Config -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
	    <param-value>
	    	classpath:config/spring/common-*.xml
	    	classpath:config/spring/context-*.xml
	    	classpath:config/spring/spring-tiles-*.xml
	    </param-value>
	</context-param>
	
		
	
	
	<!-- Log4j Config -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<!--  
		<param-value>/WEB-INF/log/log4j.properties</param-value>
		<param-value>classpath:config/log/log4j.xml</param-value>
		-->
		<param-value>classpath:log4j.xml</param-value>
	</context-param>
	
	
	
	
	<!-- 
	org.springframework.web.util.Log4jConfigListener에서 System Property에 Root Path를 저장한다
	System.getProperty("webapp.root");
	<context-param>
 		<param-name>webAppRootKey</param-name>
 		<param-value>webapp.root</param-value>
 	</context-param>
	 -->
	
	
	
	<!-- Encoding Filter -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	
	<!-- 
	<filter>
		<filter-name>responseCachingFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>responseCachingFilter</filter-name>
		<url-pattern>*.js</url-pattern>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.htm</url-pattern>
		<url-pattern>*.jpg</url-pattern>
		<url-pattern>*.jpeg</url-pattern>
		<url-pattern>*.gif</url-pattern>
		<url-pattern>*.png</url-pattern>
		<url-pattern>*.bmp</url-pattern>
		<url-pattern>*.css</url-pattern>
	</filter-mapping>
	 -->
	 
	
	
	
	
	<!-- HiddenHttpMethodFilter 사용하면서 파일업로드(enctype="multipart/data")가 정상적으로 될 수 있게 하기 위해 사용 -->
	<!--  
	<filter>
    	<filter-name>multipartFilter</filter-name>
    	<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
    	<filter-name>multipartFilter</filter-name>
	    <url-pattern>/springrest/*</url-pattern>
	</filter-mapping>
	-->
	
	
	<!--
	Method Fileter 
	Method 구분
		- GET : URI에 해당하는 자료의 전송을 요청한다. 
		- PUT, POST : 서버가 처리할 수 있는 자료를 보낸다. 새로운 리소스 생성 (새로운 리소스의 URI를 생성하는 주체가 서버이면 POST를 사용)
		- PUT : 해당 URI의 자료를 저장한다. 존재하는 리소스 변경
		- DELETE : 존재하는 리소스 삭제
		- HEAD : GET과 같은 명령이지만, 자료에 대한 정보(meta data)만을 받는다.
		- OPTION : 존재하는 리소스의 지원 method 체크
		- TRACE : 이전에 요청한 내용을 들을 것을 요청한다.
	Jsp    : <input type="hidden" name="_method" value="delete" /> 처럼 사용
	Action : @RequestMapping(method=RequestMethod.DELETE)
	-->
	<filter>
		<filter-name>httpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
	
	<filter-mapping>
        <filter-name>httpMethodFilter</filter-name>
        <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	
	
	<!--
	URL Rewriter
	 
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	
	
	
	
	
	
	
	
	
	
	
	<!-- Spring Listener -->
	<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- 
    <listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	-->
	
	
	
	<!-- Log4j Listener -->
	<!--
	Spring Listener 또는 Log4j Listener 둘 중 하나만 존재해야 한다.
	context-param 에 Spring의 contextConfigLocation를 설정하지 않았을 경우에는 Log4j Listener로 설정할 수 있다.
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	 -->
	
	
	
	
	
	
	
	
	
	<!-- 
	Spring Handles all requests into the application
	
	servlet-name이 dispatcher라면 /WEB-INF/dispatcher-servlet.xml 파일이 WebApplicationContext 설정 파일이 된다.
	
	// ApplicationContext 빈 설정 파일
	<context-param>
		<param-name>contextConfigLocation</param-name>
	    <param-value>
			// 빈 설정 파일들간에 구분은 줄바꿈(\n),컴마(,),세미콜론(;)등으로 한다.
            /WEB-INF/config/easycompany-service.xml,/WEB-INF/config/easycompany-dao.xml 
        </param-value>
	</context-param>
	 
	// 웹 어플리케이션이 시작되는 시점에 ApplicationContext을 로딩하며, 로딩된 빈정보는 모든 WebApplicationContext들이 참조할 수 있다
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<servlet>
		<servlet-name>employee</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/config/easycompany-service.xml
			</param-value>
		</init-param>
	</servlet>
        
	<servlet>
		<servlet-name>webservice</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/config/easycompany-webservice.xml
			</param-value>
		</init-param>
	</servlet>
	
	이 ApplicationContext의 빈 정보는 모든 WebApplicationContext들이 참조할 수 있다. 
	예를 들어, DispatcherServlet은 2개 사용하지만 같은 Service, DAO를 사용하는 web.xml을 아래와 같이 작성했다면, 
	easycompany-servlet.xml에 정의된 빈정보는 easycompany-webservice.xml가 참조할 수 없지만, 
	easycompany-service.xml, easycompany-dao.xml에 설정된 빈 정보는 easycompany-servlet.xml, easycompany-webservice.xml 둘 다 참조한다.
	
	참고로 WebApplicationContext는 ApplicationContext를 상속받아서 처리하므로 중복설정이 있을 경우 WebApplicationContext를 따르게 된다.
	-->
	<servlet>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
		<!--  
		<servlet-class>com.web.config.MyDispatcherServlet</servlet-class>
		-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!--  
			<param-value>/WEB-INF/config/spring/context-common.xml</param-value>
			<param-value>/WEB-INF/config/spring/*.xml</param-value>
			<param-value>
				classpath:config/spring/common-*.xml
				classpath:config/spring/context-*.xml
				classpath:config/spring/tiles-*.xml
			</param-value>
			-->
			<param-value>classpath:config/spring/dispatcher-*.xml</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	
	
	<!-- 
	자동 입력 방지 이미지 서블릿 ( Captcha )
	
	<servlet>
		<servlet-name>jcaptcha</servlet-name>
		<servlet-class>com.web.common.captcha.ImageCaptchaServlet</servlet-class>
		<load-on-startup>0</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>jcaptcha</servlet-name>
		<url-pattern>/jcaptcha</url-pattern>
	</servlet-mapping>
	 -->
	
	


	
	<!-- Session Timeout (단위 : 분) -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
	
	
	
	
	
	<!-- Default Page -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
	
	
	
	
	<!-- Error Page -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/uncaughtException</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/resourceNotFound</location>
	</error-page>
	
	
	
	
	
	<!-- TagLibrary -->
	<jsp-config>
    	<taglib>
    		<taglib-uri>http://com.web/util</taglib-uri>
    		<taglib-location>/WEB-INF/tlds/util.tld</taglib-location>
    	</taglib>
    </jsp-config>
    
	
	
</web-app>