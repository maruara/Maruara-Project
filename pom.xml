<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- 
	Maven Lifecycle
		clean - build - site
		
		build lifecycle
			컴파일(compile) - 테스트(test) - 패키징(package) - 배포(deploy)
	
	Phase
		- build lifecycle의 각각의 단계를 의미한다.
		- 특정 순서에 따라서 goal이 실행되도록 구조를 제공한다.
		- 의존 관계가 있다. 예를 들어 package phase가 수행되기 위해서는 이전 phase가 순서대로 수행된다.
		- Phases : process-resources   > compile          > process-classes > process-test-resources  > test-compile         > test          > prepare-package > package
		  Goals  : resources:resources > compiler:compile >                 > resources:testResources > compiler:testCompile > surefire:test >                 > jar:jar
	Goal
		- Ant의 Target과 같은 개념
	Phase와 Goal의 관계
		- Maven에서 제공하는 모든 기능은 플러그인 기반으로 동작
		- Maven에서 기본으로 제공하는 Phase를 실행하면 해당 Phase와 연결된 플러그인의 Goal이 실행된다.
		- 각 phase는 0개 이상의 goal과 바인드 되어 있으며, 대부분 0개나 1개의 goal이 바인드 되어있다.
		- Maven에서 플러그인을 실행할 때 '플러그인이름:플러그인지원골'의 형식으로 실행 할 기능을 선택할 수 있다.
		  예를 들어 mvn compiler:compile은 'compiler' 플러그인에서 'compile' 기능(goal)을 실행한다는 뜻이다.
	
	Maven Default Phase와 Goal
		- process-resources
			- resources:resources Goal이 실행된다.
			- <resource><directory>를 <outputDirectory>에 생성한다.
		- compile
			- resources:resources, compiler:compile Goal이 실행된다.
			- 소스코드를 컴파일한 클래스파일을 <outputDirectory>에 생성한다.
		- test-compile
			- compiler:compile, compiler:testCompile Goal이 실행된다.
			- 테스트 소스 코드를 컴파일한다.
		- test
			- compiler:compile, compiler:testCompile, surefire:test Goal이 실행된다.
			- junit과 같은 테스트 코드를 실행, 테스트가 실패하면 빌드를 멈춘다.
			- target/surefire-reports 디렉토리 안에 test 리포트 파일을 생성한다.
			- 단위 테스트 코드가 깨져도 빌드를 성공시키려면 maven:test.skip 속성을 true로 설정하면 된다.
		- package
			- compile, test-compile, test 순으로 실행된 다음 jar, war, ear 파일이 target 디렉토리 아래에 생성된다.
			- 패키징에 따라 필요한 플러그인을 사용한다.
		- install
			- 로컬 repository에 패키지를 배포한다.
		- deploy
			- 원격 repository에 등록하여, 다른 프로젝트에서 사용 할 수 있도록 한다.
		- clean
			- target 디렉토리의 결과물을 모두 제거한다.
	 -->
	
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.maruara</groupId>
	<artifactId>maruara-project</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>maruara-project</name>
	<url>http://www.github.com/maruara/maruara-project</url>
	<description>Maruara Spring3 Project</description>
	
	<!-- 
	개발과 운영이 다를 경우 개발의 build를 정의 한 다음 profiles에 운영에 관한 build 설정을 재정의 해서 사용할 수 있다.
	production profile을 빌드하는 방법은
		mvn clean install -Pproduction -X
		-P : profile명 지정
		-X : 디버깅용 출력에 사용
	<profiles>
		<profile>
			<id>production</id>
			<build>
				<resources>
					<resource>
						<directory>${project.basedir}/resources/production</directory>
						<excludes>
							<exclude>**/*.java</exclude>
						</excludes>
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>
	
	또는 profile 속성을 지정하여 ${속성명}으로 사용할 수도 있다. -Dproperty=value 처럼 옵션으로 사용할 수도 있다.
		mvn package -P<profile>
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<env>dev</env>
			</properties>
		</profile>
		<profile>
			<id>stage</id>
			<properties>
				<env>stage</env>
			</properties>
		</profile>
	</profiles>
	<resources>
		<resource>
			<directory>src/main/resources-${env}</directory>
		</resource>
	</resources>
	 -->
	

	<build>
		<finalName>maruara-project</finalName>
		<directory>${basedir}/WebContent/WEB-INF/classes</directory>
		<sourceDirectory>${basedir}/src</sourceDirectory>
		<outputDirectory>${basedir}/WebContent/WEB-INF/classes</outputDirectory>
		<scriptSourceDirectory>${basedir}/src/scripts</scriptSourceDirectory>
		<testSourceDirectory>${basedir}/test</testSourceDirectory>
		<testOutputDirectory>${basedir}/classes-test</testOutputDirectory>
		<resources>
			<resource>
				<directory>${basedir}/config</directory>
				<excludes>
					<exclude>*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
			</plugin>
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<warSourceDirectory>${basedir}/WebContent</warSourceDirectory>
				</configuration>
			</plugin>
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
			</plugin>
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<properties>
		<spring.version>3.0.6.RELEASE</spring.version>
		<spring.security.version>3.0.7.RELEASE</spring.security.version>
	</properties>	
	
	
	<!-- 
	dependency 엔트리 설정시 속성으로 주어지는 scope를 가지고 향후에 빌드 - 테스트 - 배포 과정에 따라 영향을 다르게 줄 수 있다. 괄호 안의 O, X는 배포시 해당 의존성 모듈이 포함되는지 여부
		compile(O) - 소스코드와 같이 컴파일할 때도 필요하고, 실행 중에도 필요한 경우, scope를 별도 설정을 하지 않으면 기본값
		runtime(O) - JDBC 라이브러리와 같이 컴파일할 때는 기본 JDK상의 JDBC Interface만 가지고 컴파일이 되는데 이를 구현한 JDBC 라이브러리들의 경우에는 실행시에만 필요하게 된다.
		provided(X) - 컴파일할 때도 필요하고, 실행할 때도 필요하지만 이미 배포되는 엔진(톰캣, 웹로직)에 대응하거나 혹은 엔진이 이미 가지고 있기 때문에 굳이 배포할 필요가 없는 경우에 지정한다.
		test(X) - Stub 코드와 같이 테스트할 때에는 필요하지만 실제 실행 환경에서는 불필요한 경우의 모듈들을 지정한다. 배포할 경우에는 포함되지 않는다.
	 -->
	<dependencies>
		<!-- 
		<dependency>
			<groupId>com.sun</groupId>
			<artifactId>tools</artifactId>
			<version>1.7.0</version>
			<scope>system</scope>
			<systemPath>${env.JAVA_HOME}/lib/tools.jar</systemPath>
		</dependency>
		 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>2.2.2</version>
			<exclusions>
				<exclusion>
					<artifactId>commons-digester</artifactId>
					<groupId>commons-digester</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.160</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.ehcache-spring-annotations</groupId>
			<artifactId>ehcache-spring-annotations</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.1.2</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>asm</groupId>
			<artifactId>asm</artifactId>
			<version>3.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.6.12</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.6.12</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-digester3</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jstl-impl</artifactId>
			<version>1.2</version>
			<exclusions>
				<exclusion>
					<artifactId>servlet-api</artifactId>
					<groupId>javax.servlet</groupId>
				</exclusion>
				<exclusion>
					<artifactId>jsp-api</artifactId>
					<groupId>javax.servlet.jsp</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.0.6</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.2</version>
		</dependency>
		<dependency>
			<groupId>commons-digester</groupId>
			<artifactId>commons-digester</artifactId>
			<version>2.1</version>
		</dependency>
		<!--
		<dependency>
			<groupId>org.lazyluke</groupId>
			<artifactId>log4jdbc-remix</artifactId>
			<version>0.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
		</dependency>
		-->
	</dependencies>
	<modules>
	</modules>

</project>